// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/services (interfaces: IOrdersService)
//
// Generated by this command:
//
//	mockgen -destination=internal/mocks/mock_services_orders_service.go -package=mocks ./internal/services IOrdersService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/aleksandrpnshkn/gophermart/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockIOrdersService is a mock of IOrdersService interface.
type MockIOrdersService struct {
	ctrl     *gomock.Controller
	recorder *MockIOrdersServiceMockRecorder
	isgomock struct{}
}

// MockIOrdersServiceMockRecorder is the mock recorder for MockIOrdersService.
type MockIOrdersServiceMockRecorder struct {
	mock *MockIOrdersService
}

// NewMockIOrdersService creates a new mock instance.
func NewMockIOrdersService(ctrl *gomock.Controller) *MockIOrdersService {
	mock := &MockIOrdersService{ctrl: ctrl}
	mock.recorder = &MockIOrdersServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIOrdersService) EXPECT() *MockIOrdersServiceMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockIOrdersService) Add(ctx context.Context, orderNumber string, user models.User) (models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, orderNumber, user)
	ret0, _ := ret[0].(models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockIOrdersServiceMockRecorder) Add(ctx, orderNumber, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockIOrdersService)(nil).Add), ctx, orderNumber, user)
}

// UpdateAccrual mocks base method.
func (m *MockIOrdersService) UpdateAccrual(ctx context.Context, order models.Order) (models.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccrual", ctx, order)
	ret0, _ := ret[0].(models.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccrual indicates an expected call of UpdateAccrual.
func (mr *MockIOrdersServiceMockRecorder) UpdateAccrual(ctx, order any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccrual", reflect.TypeOf((*MockIOrdersService)(nil).UpdateAccrual), ctx, order)
}
