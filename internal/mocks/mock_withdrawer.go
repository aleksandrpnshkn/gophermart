// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/handlers (interfaces: Withdrawer)
//
// Generated by this command:
//
//	mockgen -destination=internal/mocks/mock_withdrawer.go -package=mocks ./internal/handlers Withdrawer
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/aleksandrpnshkn/gophermart/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockWithdrawer is a mock of Withdrawer interface.
type MockWithdrawer struct {
	ctrl     *gomock.Controller
	recorder *MockWithdrawerMockRecorder
	isgomock struct{}
}

// MockWithdrawerMockRecorder is the mock recorder for MockWithdrawer.
type MockWithdrawerMockRecorder struct {
	mock *MockWithdrawer
}

// NewMockWithdrawer creates a new mock instance.
func NewMockWithdrawer(ctrl *gomock.Controller) *MockWithdrawer {
	mock := &MockWithdrawer{ctrl: ctrl}
	mock.recorder = &MockWithdrawerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWithdrawer) EXPECT() *MockWithdrawerMockRecorder {
	return m.recorder
}

// GetWithdrawals mocks base method.
func (m *MockWithdrawer) GetWithdrawals(ctx context.Context, user models.User) ([]models.BalanceChange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithdrawals", ctx, user)
	ret0, _ := ret[0].([]models.BalanceChange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithdrawals indicates an expected call of GetWithdrawals.
func (mr *MockWithdrawerMockRecorder) GetWithdrawals(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawals", reflect.TypeOf((*MockWithdrawer)(nil).GetWithdrawals), ctx, user)
}

// Withdraw mocks base method.
func (m *MockWithdrawer) Withdraw(ctx context.Context, orderNumber string, amountRaw float64, user models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdraw", ctx, orderNumber, amountRaw, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Withdraw indicates an expected call of Withdraw.
func (mr *MockWithdrawerMockRecorder) Withdraw(ctx, orderNumber, amountRaw, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdraw", reflect.TypeOf((*MockWithdrawer)(nil).Withdraw), ctx, orderNumber, amountRaw, user)
}
