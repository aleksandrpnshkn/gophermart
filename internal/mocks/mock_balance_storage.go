// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/storage/balance (interfaces: Storage)
//
// Generated by this command:
//
//	mockgen -destination=internal/mocks/mock_balance_storage.go -package=mocks -mock_names Storage=MockBalanceStorage ./internal/storage/balance Storage
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/aleksandrpnshkn/gophermart/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockBalanceStorage is a mock of Storage interface.
type MockBalanceStorage struct {
	ctrl     *gomock.Controller
	recorder *MockBalanceStorageMockRecorder
	isgomock struct{}
}

// MockBalanceStorageMockRecorder is the mock recorder for MockBalanceStorage.
type MockBalanceStorageMockRecorder struct {
	mock *MockBalanceStorage
}

// NewMockBalanceStorage creates a new mock instance.
func NewMockBalanceStorage(ctrl *gomock.Controller) *MockBalanceStorage {
	mock := &MockBalanceStorage{ctrl: ctrl}
	mock.recorder = &MockBalanceStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBalanceStorage) EXPECT() *MockBalanceStorageMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockBalanceStorage) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockBalanceStorageMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockBalanceStorage)(nil).Close))
}

// GetBalance mocks base method.
func (m *MockBalanceStorage) GetBalance(ctx context.Context, user models.User) (models.Balance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", ctx, user)
	ret0, _ := ret[0].(models.Balance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockBalanceStorageMockRecorder) GetBalance(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockBalanceStorage)(nil).GetBalance), ctx, user)
}

// GetWithdrawals mocks base method.
func (m *MockBalanceStorage) GetWithdrawals(ctx context.Context, user models.User) ([]models.BalanceChange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWithdrawals", ctx, user)
	ret0, _ := ret[0].([]models.BalanceChange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWithdrawals indicates an expected call of GetWithdrawals.
func (mr *MockBalanceStorageMockRecorder) GetWithdrawals(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWithdrawals", reflect.TypeOf((*MockBalanceStorage)(nil).GetWithdrawals), ctx, user)
}

// Ping mocks base method.
func (m *MockBalanceStorage) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockBalanceStorageMockRecorder) Ping(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockBalanceStorage)(nil).Ping), ctx)
}

// Withdraw mocks base method.
func (m *MockBalanceStorage) Withdraw(ctx context.Context, withdraw models.BalanceChange) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdraw", ctx, withdraw)
	ret0, _ := ret[0].(error)
	return ret0
}

// Withdraw indicates an expected call of Withdraw.
func (mr *MockBalanceStorageMockRecorder) Withdraw(ctx, withdraw any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdraw", reflect.TypeOf((*MockBalanceStorage)(nil).Withdraw), ctx, withdraw)
}
