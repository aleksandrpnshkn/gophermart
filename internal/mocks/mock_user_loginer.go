// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/handlers (interfaces: UserLoginer)
//
// Generated by this command:
//
//	mockgen -destination=internal/mocks/mock_user_loginer.go -package=mocks ./internal/handlers UserLoginer
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/aleksandrpnshkn/gophermart/internal/models"
	types "github.com/aleksandrpnshkn/gophermart/internal/types"
	gomock "go.uber.org/mock/gomock"
)

// MockUserLoginer is a mock of UserLoginer interface.
type MockUserLoginer struct {
	ctrl     *gomock.Controller
	recorder *MockUserLoginerMockRecorder
	isgomock struct{}
}

// MockUserLoginerMockRecorder is the mock recorder for MockUserLoginer.
type MockUserLoginerMockRecorder struct {
	mock *MockUserLoginer
}

// NewMockUserLoginer creates a new mock instance.
func NewMockUserLoginer(ctrl *gomock.Controller) *MockUserLoginer {
	mock := &MockUserLoginer{ctrl: ctrl}
	mock.recorder = &MockUserLoginerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserLoginer) EXPECT() *MockUserLoginerMockRecorder {
	return m.recorder
}

// LoginUser mocks base method.
func (m *MockUserLoginer) LoginUser(ctx context.Context, login, password string) (models.User, types.RawToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginUser", ctx, login, password)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(types.RawToken)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// LoginUser indicates an expected call of LoginUser.
func (mr *MockUserLoginerMockRecorder) LoginUser(ctx, login, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginUser", reflect.TypeOf((*MockUserLoginer)(nil).LoginUser), ctx, login, password)
}
