// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/middlewares (interfaces: TokenParser)
//
// Generated by this command:
//
//	mockgen -destination=internal/mocks/mock_token_parser.go -package=mocks ./internal/middlewares TokenParser
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/aleksandrpnshkn/gophermart/internal/models"
	types "github.com/aleksandrpnshkn/gophermart/internal/types"
	gomock "go.uber.org/mock/gomock"
)

// MockTokenParser is a mock of TokenParser interface.
type MockTokenParser struct {
	ctrl     *gomock.Controller
	recorder *MockTokenParserMockRecorder
	isgomock struct{}
}

// MockTokenParserMockRecorder is the mock recorder for MockTokenParser.
type MockTokenParserMockRecorder struct {
	mock *MockTokenParser
}

// NewMockTokenParser creates a new mock instance.
func NewMockTokenParser(ctrl *gomock.Controller) *MockTokenParser {
	mock := &MockTokenParser{ctrl: ctrl}
	mock.recorder = &MockTokenParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenParser) EXPECT() *MockTokenParserMockRecorder {
	return m.recorder
}

// ParseToken mocks base method.
func (m *MockTokenParser) ParseToken(ctx context.Context, token types.RawToken) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", ctx, token)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockTokenParserMockRecorder) ParseToken(ctx, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockTokenParser)(nil).ParseToken), ctx, token)
}
