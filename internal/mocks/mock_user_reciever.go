// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/handlers (interfaces: UserReceiver)
//
// Generated by this command:
//
//	mockgen -destination=internal/mocks/mock_user_reciever.go -package=mocks ./internal/handlers UserReceiver
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/aleksandrpnshkn/gophermart/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockUserReceiver is a mock of UserReceiver interface.
type MockUserReceiver struct {
	ctrl     *gomock.Controller
	recorder *MockUserReceiverMockRecorder
	isgomock struct{}
}

// MockUserReceiverMockRecorder is the mock recorder for MockUserReceiver.
type MockUserReceiverMockRecorder struct {
	mock *MockUserReceiver
}

// NewMockUserReceiver creates a new mock instance.
func NewMockUserReceiver(ctrl *gomock.Controller) *MockUserReceiver {
	mock := &MockUserReceiver{ctrl: ctrl}
	mock.recorder = &MockUserReceiverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserReceiver) EXPECT() *MockUserReceiverMockRecorder {
	return m.recorder
}

// FromContext mocks base method.
func (m *MockUserReceiver) FromContext(ctx context.Context) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FromContext", ctx)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FromContext indicates an expected call of FromContext.
func (mr *MockUserReceiverMockRecorder) FromContext(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FromContext", reflect.TypeOf((*MockUserReceiver)(nil).FromContext), ctx)
}
