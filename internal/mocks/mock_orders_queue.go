// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/handlers (interfaces: OrdersQueue)
//
// Generated by this command:
//
//	mockgen -destination=internal/mocks/mock_orders_queue.go -package=mocks ./internal/handlers OrdersQueue
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/aleksandrpnshkn/gophermart/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockOrdersQueue is a mock of OrdersQueue interface.
type MockOrdersQueue struct {
	ctrl     *gomock.Controller
	recorder *MockOrdersQueueMockRecorder
	isgomock struct{}
}

// MockOrdersQueueMockRecorder is the mock recorder for MockOrdersQueue.
type MockOrdersQueueMockRecorder struct {
	mock *MockOrdersQueue
}

// NewMockOrdersQueue creates a new mock instance.
func NewMockOrdersQueue(ctrl *gomock.Controller) *MockOrdersQueue {
	mock := &MockOrdersQueue{ctrl: ctrl}
	mock.recorder = &MockOrdersQueueMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrdersQueue) EXPECT() *MockOrdersQueueMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockOrdersQueue) Add(ctx context.Context, order models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, order)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockOrdersQueueMockRecorder) Add(ctx, order any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockOrdersQueue)(nil).Add), ctx, order)
}

// Stop mocks base method.
func (m *MockOrdersQueue) Stop() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop")
}

// Stop indicates an expected call of Stop.
func (mr *MockOrdersQueueMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockOrdersQueue)(nil).Stop))
}
